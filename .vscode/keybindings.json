// Place your key bindings in this file to override the defaults
[
    {
        "key": "alt+/",
        "command": "whichkey.show",
        "when": "editorTextFocus"
    },
    // quick open navigation
    {
        "key": "ctrl+n",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+shift+n",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    // prevents folds from automatically unfolding during navigation
    {
        "key": "gj",
        "command": "cursordown",
        "when": "editortextfocus && neovim.mode == 'normal'"
    },
    {
        "key": "gk",
        "command": "cursorUp",
        "when": "editorTextFocus && neovim.mode == 'normal'"
    },
    // sidebar
    {
        "key": "j",
        "command": "list.focusAnyDown",
        "when": "sideBarFocus && !inputFocus"
    },
    {
        "key": "k",
        "command": "list.focusAnyUp",
        "when": "sideBarFocus && !inputFocus"
    },
    // explorer
    {
        "key": "a",
        "command": "workbench.files.action.createFileFromExplorer",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "f",
        "command": "workbench.files.action.createFolderFromExplorer",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "c",
        "command": "filesExplorer.copy",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "x",
        "command": "filesExplorer.cut",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "p",
        "command": "filesExplorer.paste",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "d",
        "command": "moveFileToTrash",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "r",
        "command": "renameFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "shift+y",
        "command": "copyFilePath",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "y",
        "command": "copyRelativeFilePath",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    // sidebar visibility
    {
        "key": "ctrl+shift+e",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "explorerViewletFocus"
    },
    // vim-style window navigation
    {
        "key": "ctrl+h",
        "command": "workbench.action.navigateLeft",
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.navigateRight",
        "when": "!terminalFocus && !editorHasSelection"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.navigateUp",
        "when": "!editorTextFocus"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.navigateDown",
        "when": "!panelFocus && panelVisible"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.focusSideBar",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.focusAuxiliaryBar",
        "when": "editorTextFocus"
    },
    // Navigation in Code Action
    {
        "key": "ctrl+j",
        "command": "selectNextCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+k",
        "command": "selectPrevCodeAction",
        "when": "codeActionMenuVisible"
    },
    // Navigation in Quick Open (Ctrl+O / Ctrl+P)
    {
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    // Navigation in Suggestions
    {
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "editorTextFocus && suggestWidgetVisible"
    },
    {
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "editorTextFocus && suggestWidgetVisible"
    },
    {
        "key": "ctrl+i",
        "command": "composerMode.agent"
    },
    {
        "key": "ctrl+alt+m",
        "command": "workbench.action.toggleMaximizedPanel",
        "when": "terminalFocus"
    },
    // harpoon
    {
        "key": "ctrl+h",
        "command": "vscode-harpoon.gotoEditor1",
        "when": "vscode-harpoon.enabled",
    },
    {
        "key": "ctrl+j",
        "command": "vscode-harpoon.gotoEditor2",
        "when": "vscode-harpoon.enabled", }, { "key": "ctrl+k", "command": "vscode-harpoon.gotoEditor3",
        "when": "vscode-harpoon.enabled",
    },
    {
        "key": "ctrl+l",
        "command": "vscode-harpoon.gotoEditor4",
        "when": "vscode-harpoon.enabled",
    },
    // Cursor AI chat navigation
    {
        "key": "ctrl+l",
        "command": "-aichat.newchataction"
    },
    {
        "key": "ctrl+l",
        "command": "aichat.newchataction",
        "when": "editorFocus || auxiliaryBarFocus"
    },
    {
        "key": "ctrl+shift+k",
        "command": "cursorai.action.generateInTerminal",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalPromptBarVisible || terminalProcessSupported && terminalPromptBarVisible"
    },
    {
        "key": "ctrl+k",
        "command": "-cursorai.action.generateInTerminal",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalPromptBarVisible || terminalProcessSupported && terminalPromptBarVisible"
    },
]
